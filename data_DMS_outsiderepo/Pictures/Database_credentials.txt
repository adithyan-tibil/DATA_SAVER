-----LOCAL
PG_DB_USERNAME= postgres
PG_DB_HOST= localhost
PG_DB_NAME= registryMS
PG_DB_PASSWORD= tibil123
PG_DB_PORT= 5432

----WFMS
PG_DB_USERNAME= postgres
PG_DB_HOST= localhost
PG_DB_NAME= dms_db
PG_DB_PASSWORD= postgres
PG_DB_PORT= 5433
WF_URL = http://localhost:3006/requests
REGISTRY_URL = http://localhost:3007
HANDLER_URL = http://localhost:3006/requests

-----DEV_MS
username - postgres
password - tibil2024
host: dms-db.c1asoyckgmlk.ap-south-1.rds.amazonaws.com


import {CommonUpdateService} from '../../../common/entityUpdate.service';
import {updateEnum} from "../../../common/enum/update.enum";


,
                private commonUpdateService: CommonUpdateService
                
                

    @Patch('/banks/update')
    async updateEntity(@Body() body, @Res() res: Response) {
        try {
            // Validate input
            const { event, details } = body; // Use event and details directly
            if (!event || !details) {
                return res.status(400).json({
                    code: updateEnum.ERROR_CODE,
                    message: 'Event type and details are required.'
                });
            }

            // Execute the update
            const updateResult = await this.commonUpdateService.updateEntityExecution(body);

            // Send response based on the update result
            res.status(
                updateResult.code === updateEnum.SUCCESS_CODE ? 200 : 400
            ).json(updateResult);
        } catch (e) {
            res.status(500).json({
                code: updateEnum.ERROR_CODE,
                message: e.message
            });
        }
    }






COALESCE(NULLIF(bank_addrs[i], ''), NULL)






        const rowIds: (number | null)[] = [];
            rowIds.push(edetail?.row_id);

changes:
send row as an entire array(array of array containing first array as header remaining as rows)
use user defined datatypes
data passed from ui as df using schema library between UI & MS and UDT in PG

